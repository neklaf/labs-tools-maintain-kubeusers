# TODO: define the service, obviously
apiVersion: v1
kind: Namespace
metadata:
  name: maintain-kubeusers
  labels:
    name: maintain-kubeusers
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: user-maintainer
  namespace: maintain-kubeusers
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: user-maintainer
rules:
- apiGroups:
  - rbac.authorization.k8s.io
  resources:
  - rolebindings
  - roles
  verbs:
  - create
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - extensions
  resources:
  - podsecuritypolicies
  verbs:
  - create
  - get
  - list
  - patch
  - update
  - use
- apiGroups:
  - ""
  resources:
  - namespaces
  - configmaps
  - resourcequotas
  - limitranges
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - certificates.k8s.io
  resources:
  - certificatesigningrequests
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - replace
  - update
- apiGroups:
  - certificates.k8s.io
  resources:
  - certificatesigningrequests/status
  verbs:
  - get
- apiGroups:
  - certificates.k8s.io
  resources:
  - certificatesigningrequests/approval
  verbs:
  - update
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: user-maintainer-binding
subjects:
- kind: ServiceAccount
  namespace: maintain-kubeusers
  name: user-maintainer
roleRef:
  kind: ClusterRole
  name: user-maintainer
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: user-maintainer-psp-binding
subjects:
- kind: ServiceAccount
  namespace: maintain-kubeusers
  name: user-maintainer
roleRef:
  kind: ClusterRole
  name: privileged-psp
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: user-maintainer-tools-user
subjects:
- kind: ServiceAccount
  namespace: maintain-kubeusers
  name: user-maintainer
roleRef:
  kind: ClusterRole
  name: tools-user
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: maintain-kubeusers-test
  namespace: maintain-kubeusers
  labels:
    app: maintain-kubeusers-test
spec:
  replicas: 1
  selector:
    matchLabels:
      app: maintain-kubeusers-test
  template:
    metadata:
      labels:
        app: maintain-kubeusers-test
    spec:
      serviceAccountName: user-maintainer
      volumes:
      - name: my-host-nfs
        hostPath:
          path: /data/project
          type: Directory
      containers:
      - name: maintain-kubeusers
        imagePullPolicy: IfNotPresent
        # TODO: change this to production values when the time comes.
        image: mk-test:testcase
        command: ["/bin/ash"]
        args: ["-c", "while true; do echo hello; sleep 10;done"]
        # production values
        # image: maintain-kubeusers:latest
        # command: ["/app/venv/bin/python"]
        # args: ["/app/maintain_kubeusers"]
        volumeMounts:
        - mountPath: /data/project
          name: my-host-nfs
        # TODO: Enable this liveness probe once it actually is running the service
        # livenessProbe:
        #   exec:
        #     command:
        #     - find
        #     - /tmp/run.check
        #     - -mmin
        #     - '+5'
        #     - -exec
        #     - rm
        #     - /tmp/run.check
        #     - ;
        #   initialDelaySeconds: 5
        #   periodSeconds: 5

